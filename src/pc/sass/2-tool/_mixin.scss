@mixin retina {
    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx) {
        @content;
    }
}

@mixin query($size) {
    @media all and (max-width: $size) {
        @content;
    }
}

//sprite smith(gulp)のタスクで使用
@mixin sprite-width($sprite, $scale: 1) {
    width: ceil(nth($sprite, 5) * $scale);
}

//sprite smith(gulp)のタスクで使用
@mixin sprite-height($sprite, $scale: 1) {
    height: ceil(nth($sprite, 6) * $scale);
}

//sprite smith(gulp)のタスクで使用
@mixin sprite-position($sprite, $scale: 1) {
    $sprite-offset-x: nth($sprite, 3) * $scale;
    $sprite-offset-y: nth($sprite, 4) * $scale;
    background-position: $sprite-offset-x $sprite-offset-y;
}

//sprite smith(gulp)のタスクで使用
@mixin sprite-image($sprite) {
    $sprite-image: nth($sprite, 9);
    background-image: url(#{$sprite-image});
    background-repeat: no-repeat;
}

//sprite smith(gulp)のタスクで使用
@mixin sprite-size($sprite, $scale: 0.5) {
    background-size: floor(nth($sprite, 7)*$scale) floor(nth($sprite, 8)*$scale);
}

//sprite smith(gulp)のタスクで使用
@mixin sprite($sprite, $scale: 0.5) {
    display: inline-block;
    @extend %u-blow;
    @include sprite-image($sprite);
    @include sprite-position($sprite, $scale);
    @include sprite-width($sprite, $scale);
    @include sprite-height($sprite, $scale);
    @include sprite-size($sprite, $scale);
}

//utilityクラスを生成
@mixin utility($nth: 5, $start: 0, $end: 14) {
  @for $i from $start through $end {
    .u-mt#{$i * $nth} {
      margin-top: ($nth * $i)+px !important;
    }

    .u-mr#{$i * $nth} {
      margin-right: ($nth * $i)+px !important;
    }

    .u-mb#{$i * $nth} {
      margin-bottom: ($nth * $i)+px !important;
    }

    .u-ml#{$i * $nth} {
      margin-left: ($nth * $i)+px !important;
    }

    .u-pt#{$i * $nth} {
      padding-top: ($nth * $i)+px !important;
    }

    .u-pr#{$i * $nth} {
      padding-right: ($nth * $i)+px !important;
    }

    .u-pb#{$i * $nth} {
      padding-bottom: ($nth * $i)+px !important;
    }

    .u-pl#{$i * $nth} {
      padding-left: ($nth * $i)+px !important;
    }
  }
}

//矢印を作る
@mixin arrow($size,$width,$color,$direction){
    content: "";
    display: inline-block;
    width: $size;
    height: $size;
    transform: rotate(45deg);
    border: $width solid transparent;
    @if $direction == top {
        border-top: $width solid $color;
        border-left: $width solid $color;
    }
    @else if $direction == right {
        border-top: $width solid $color;
        border-right: $width solid $color;
    }
    @else if $direction == top {
        border-right: $width solid $color;
        border-bottom: $width solid $color;
    }
    @else if $direction == left {
        border-left: $width solid $color;
        border-bottom: $width solid $color;
    }

}